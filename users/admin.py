import requests
from django.contrib import admin, messages
from django import forms
from django.shortcuts import render
from django.http import HttpResponseRedirect
from .models import User
from config import BOT_TOKEN
import logging
from django.contrib import admin
from .models import PuppyRequest  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
from users.models import VisitorAppointment


logger = logging.getLogger(__name__)  # ‚úÖ –õ–æ–≥–≥–µ—Ä

# ‚úÖ URL Telegram API
TELEGRAM_API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"

# ‚úÖ –§–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
class BroadcastForm(forms.Form):
    message = forms.CharField(widget=forms.Textarea, label="–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏")

# ‚úÖ –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram API
@admin.action(description="üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É")
def send_broadcast(modeladmin, request, queryset):
    logger.info("üì¢ send_broadcast() –≤—ã–∑–≤–∞–Ω–∞!")
    print("üì¢ send_broadcast() –≤—ã–∑–≤–∞–Ω–∞!")  # üî• –õ–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å

    # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —è–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –º–µ—Ç–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞
    if request.method == "POST":
        form = BroadcastForm(request.POST)

        if form.is_valid():
            print(f"‚úÖ –§–æ—Ä–º–∞ –≤–∞–ª–∏–¥–Ω–∞! –î–∞–Ω–Ω—ã–µ: {form.cleaned_data}")  # üî• –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

            message_text = form.cleaned_data["message"]
            success_count = 0
            error_count = 0

            print(f"üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {queryset.count()}")  # üî• –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

            for user in queryset:
                print(f"üü¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.user_id}")  # üî• –õ–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å

                if user.user_id:
                    try:
                        personalized_message = f"üëã {user.full_name or '–£–≤–∞–∂–∞–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç'}, {message_text}"
                        print(f"üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}: {personalized_message}")  # üî• –õ–æ–≥

                        response = requests.post(
                            TELEGRAM_API_URL,
                            json={"chat_id": user.user_id, "text": personalized_message}
                        )

                        response_data = response.json()
                        print(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç Telegram API: {response_data}")  # üî• –õ–æ–≥ API-–æ—Ç–≤–µ—Ç–∞

                        if response_data.get("ok"):
                            success_count += 1
                        else:
                            error_count += 1

                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {user.user_id}: {e}")  # üî• –õ–æ–≥ –æ—à–∏–±–∫–∏
                        error_count += 1

            print(f"‚úÖ –ò—Ç–æ–≥: –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}, –û—à–∏–±–æ–∫: {error_count}")  # üî• –õ–æ–≥ –∏—Ç–æ–≥–æ–≤

            modeladmin.message_user(
                request,
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}, –û—à–∏–±–æ–∫: {error_count}",
                messages.SUCCESS,
            )
            return HttpResponseRedirect(request.get_full_path())

        else:
            print("‚ùå –§–æ—Ä–º–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞!")  # üî• –õ–æ–≥, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é
    else:
        print("‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –ù–ï POST, –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É!")  # üî• –õ–æ–≥ –∑–∞–ø—Ä–æ—Å–∞
    print(f"üì° –î–∞–Ω–Ω—ã–µ –∏–∑ POST-–∑–∞–ø—Ä–æ—Å–∞: {request.POST}")

    logger.info(f"üì° –î–∞–Ω–Ω—ã–µ –∏–∑ POST-–∑–∞–ø—Ä–æ—Å–∞: {request.POST}")  # ‚ûï –û—Ç–ª–∞–¥–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
    form = BroadcastForm(request.POST)

    if not form.is_valid():
        logger.error(f"‚ùå –§–æ—Ä–º–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞! –û—à–∏–±–∫–∏: {form.errors}")  # ‚ûï –ü–æ–∫–∞–∂–µ—Ç –æ—à–∏–±–∫–∏
        return render(request, "admin/broadcast_form.html", {"form": form, "users": queryset})


# ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class UserAdmin(admin.ModelAdmin):
    list_display = ('user_id', 'username', 'full_name', 'phone', 'city')
    search_fields = ('username', 'full_name', 'phone', 'city')
    actions = [send_broadcast]

admin.site.register(User, UserAdmin)


# ‚úÖ –§–∏–∫—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î
def register_user(user_id, username, full_name):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç."""
    user, created = User.objects.get_or_create(user_id=user_id)
    if created:
        user.username = username
        user.full_name = full_name
        user.save()
        logger.info(f"‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω: {user_id} ({full_name})")




@admin.register(PuppyRequest)
class PuppyRequestAdmin(admin.ModelAdmin):
    list_display = ("name", "phone", "city", "gender", "budget", "created_at")
    search_fields = ("name", "phone", "city")
    list_filter = ("gender", "coat_type", "has_children", "has_pets", "has_experience", "delivery_needed")

    fieldsets = (
        ("–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", {"fields": ("name", "phone", "country", "city")}),
        ("–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —â–µ–Ω–∫—É", {"fields": ("gender", "coat_type", "color", "adult_weight", "temperament")}),
        ("–°–µ–º–µ–π–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", {"fields": ("has_children", "children_age", "has_pets", "pets_info", "has_experience")}),
        ("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", {"fields": ("purpose", "budget", "delivery_needed")}),
        ("–î–∞—Ç–∞ –∑–∞—è–≤–∫–∏", {"fields": ("created_at",)}),
    )
    readonly_fields = ("created_at",)  # –î–∞—Ç–∞ –∑–∞—è–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

@admin.register(VisitorAppointment)
class VisitorAppointmentAdmin(admin.ModelAdmin):
    list_display = ("full_name", "phone", "date", "time", "chat_id", "created_at")
    search_fields = ("full_name", "phone", "date")
    list_filter = ("date",)

    fieldsets = (
        ("–î–∞–Ω–Ω—ã–µ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è", {"fields": ("full_name", "phone", "chat_id")}),
        ("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–∑–∏—Ç–µ", {"fields": ("date", "time")}),
    )

    readonly_fields = ("date", "time")  # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è






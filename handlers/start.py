from aiogram import Router, types
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime
from aiogram.filters import Command
from users.database import add_user
from integrations.google_calendar import schedule_appointment, get_next_available_slots, get_free_slots
from integrations.openai_chatgpt import ask_assistant
import logging
import re
logger = logging.getLogger(__name__)  # ‚úÖ –¢–µ–ø–µ—Ä—å logger –æ–ø—Ä–µ–¥–µ–ª—ë–Ω!

# üìå –°–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –ø–∏—Ç–æ–º–Ω–∏–∫
class BookingState(StatesGroup):
    waiting_for_datetime = State()
    waiting_for_name = State()
    waiting_for_phone = State()

logging.basicConfig(level=logging.INFO)
router = Router()

# üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üê∂ –û –ø–æ—Ä–æ–¥–µ —á–∏—Ö—É–∞—Ö—É–∞"), KeyboardButton(text="üè° –û –ø–∏—Ç–æ–º–Ω–∏–∫–µ")],
            [KeyboardButton(text="üõí –ú–∞–≥–∞–∑–∏–Ω"), KeyboardButton(text="üêæ –°–≤–æ–±–æ–¥–Ω—ã–µ —â–µ–Ω–∫–∏")],
            [KeyboardButton(text="üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"), KeyboardButton(text="‚ù§Ô∏è –•–æ—á—É —â–µ–Ω–∫–∞!")],
            [KeyboardButton(text="üè° –ü–æ—Å–µ—Ç–∏—Ç—å –ø–∏—Ç–æ–º–Ω–∏–∫")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª üëá"
    )
    return keyboard

# üìå –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(Command("start"))
async def start_command(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω"
    full_name = message.from_user.full_name

    logger.info(f"üìå –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à–µ–ª –≤ –±–æ—Ç–∞: {user_id}, {username}, {full_name}")
    print(f"üìå –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à–µ–ª –≤ –±–æ—Ç–∞: {user_id}, {username}, {full_name}")
    print(f"üîç add_user –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è: {user_id}, {username}, {full_name}")  # ‚úÖ –û–¢–õ–ê–î–ö–ê

    await add_user(user_id, username, full_name)  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º `await`


    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {full_name}!\n"
        "–Ø –±–æ—Ç –ø–∏—Ç–æ–º–Ω–∏–∫–∞ üè°\n\n"
        "üìå –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –æ –ø–æ—Ä–æ–¥–µ —á–∏—Ö—É–∞—Ö—É–∞, –ø–∏—Ç–æ–º–Ω–∏–∫–µ, —Å–≤–æ–±–æ–¥–Ω—ã—Ö —â–µ–Ω–∫–∞—Ö –∏ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ.\n"
        "üí¨ –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ!\n\n"
        "üëá –í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª –∏–ª–∏ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å:",
        reply_markup=get_main_menu_keyboard()
    )

# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
@router.message(lambda msg: msg.text in ["üê∂ –û –ø–æ—Ä–æ–¥–µ —á–∏—Ö—É–∞—Ö—É–∞", "üè° –û –ø–∏—Ç–æ–º–Ω–∏–∫–µ", "üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"])
async def handle_ai_request(message: types.Message):
    response = await ask_assistant(message.text, message.from_user.id)
    await message.answer(response)

# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–µ—Ç–∏—Ç—å –ø–∏—Ç–æ–º–Ω–∏–∫"
@router.message(lambda msg: msg.text == "üè° –ü–æ—Å–µ—Ç–∏—Ç—å –ø–∏—Ç–æ–º–Ω–∏–∫")
async def visit_kennel(message: types.Message):
    available_slots = get_next_available_slots()

    if not available_slots:
        await message.answer("‚ùå –í –±–ª–∏–∂–∞–π—à–∏–µ –¥–≤–µ –Ω–µ–¥–µ–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    response_text = "üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–Ω–∏ –∏ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏:\n\n"
    for date, slots in available_slots.items():
        response_text += f"üóì {date}:\n" + "\n".join(f"- {slot}" for slot in slots) + "\n\n"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="book_appointment")]]
    )

    await message.answer(
        response_text + "–ù–∞–∂–º–∏—Ç–µ *–ó–∞–ø–∏—Å–∞—Ç—å—Å—è*, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è.",
        parse_mode="Markdown",
        reply_markup=keyboard
    )


# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"
@router.callback_query(lambda c: c.data == "book_appointment")
async def book_appointment(callback_query: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ (–≤–≤–æ–¥ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏)."""
    await callback_query.answer()  # –û—Ç–≤–µ—á–∞–µ–º, —á—Ç–æ–±—ã Telegram –Ω–µ –∑–∞–≤–∏—Å
    await state.set_state(BookingState.waiting_for_datetime)

    await callback_query.message.answer(
        "üìÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: *–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú*\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: `14.03.2025 15:00`",
        parse_mode="Markdown"
    )


# üìå –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
DATE_TIME_PATTERN = r"^\d{2}\.\d{2}\.\d{4} \d{2}:\d{2}$"


@router.message(lambda msg: re.match(DATE_TIME_PATTERN, msg.text))
async def process_booking_request(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞—Ç—ã, –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è—è –∑–∞–ø—Ä–æ—Å –≤ OpenAI."""
    try:
        user_input = message.text.strip()
        date_part, time_part = user_input.split(" ")

        formatted_date = datetime.strptime(date_part, "%d.%m.%Y").strftime("%Y-%m-%d")
        formatted_datetime = f"{formatted_date} {time_part}"

        available_slots = get_free_slots(datetime.strptime(formatted_date, "%Y-%m-%d").date())

        if time_part not in available_slots:
            await message.answer("‚ùå –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.")
            return

        await state.update_data(datetime=formatted_datetime)
        await state.set_state(BookingState.waiting_for_name)

        await message.answer("üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–§–ò–û* (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):", parse_mode="Markdown")

    except ValueError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ **–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú**.")


# üìå –ó–∞–ø—Ä–æ—Å –§–ò–û ‚Üí –ó–∞–ø—Ä–æ—Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.message(BookingState.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(BookingState.waiting_for_phone)
    await message.answer("üìû –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à *–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞* –¥–ª—è —Å–≤—è–∑–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +7 900 123 45 67):",
                         parse_mode="Markdown")


# üìå –ó–∞–ø—Ä–æ—Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚Üí –ó–∞–ø–∏—Å—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
@router.message(BookingState.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    name = user_data["name"]
    date_time = user_data["datetime"]
    phone = message.text.strip()

    phone_pattern = r"^\+?\d[\d\s\-\(\)]{9,14}$"
    if not re.match(phone_pattern, phone):
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ *+7 900 123 45 67*.")
        return

    await state.clear()

    result = schedule_appointment(name, phone, datetime.strptime(date_time, "%Y-%m-%d %H:%M"))

    if "http" in result:
        await message.answer(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ {date_time}!\n{result}")
    else:
        await message.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.")


# üìå –ö–Ω–æ–ø–∫–∏ "–ú–∞–≥–∞–∑–∏–Ω", "–°–≤–æ–±–æ–¥–Ω—ã–µ —â–µ–Ω–∫–∏", "–•–æ—á—É —â–µ–Ω–∫–∞!"
@router.message(lambda msg: msg.text == "üõí –ú–∞–≥–∞–∑–∏–Ω")
async def open_shop(message: types.Message):
    shop_link = "https://xn--d1abkal9e.xn--p1ai/shop"
    shop_button = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω üõí", url=shop_link)]]
    )
    await message.answer("üõç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!", reply_markup=shop_button)

@router.message(lambda msg: msg.text == "üêæ –°–≤–æ–±–æ–¥–Ω—ã–µ —â–µ–Ω–∫–∏")
async def available_puppies(message: types.Message):
    puppies_link = "https://xn--d1abkal9e.xn--p1ai/pets"
    puppies_button = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã—Ö —â–µ–Ω–∫–æ–≤ üêæ", url=puppies_link)]]
    )
    await message.answer("üê∂ –ó–¥–µ—Å—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —â–µ–Ω–∫–∏:", reply_markup=puppies_button)

@router.message(lambda msg: msg.text == "‚ù§Ô∏è –•–æ—á—É —â–µ–Ω–∫–∞!")
async def want_puppy(message: types.Message):
    from handlers.puppy_handler import handle_puppy_request
    await handle_puppy_request(message)

# üìå –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—â–µ–Ω–∏—è —Å –ò–ò
@router.message()
async def chat_with_ai(message: Message):
    """–ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –¥–∞—Ç—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ OpenAI."""
    if not re.match(DATE_TIME_PATTERN, message.text):
        await message.answer("ü§ñ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")
        response = await ask_assistant(message.text, message.from_user.id)
        await message.answer(response)
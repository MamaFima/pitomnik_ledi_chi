from aiogram import Router, types
from aiogram.types import Message
from users.models import PuppyRequest
from aiogram import Bot
from django.conf import settings
from asgiref.sync import sync_to_async
import json

router = Router()

# ‚úÖ ID —Ö–æ–∑—è–π–∫–∏ –ø–∏—Ç–æ–º–Ω–∏–∫–∞
OWNER_CHAT_ID = 183208176  # –£–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID

# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Webhook –æ—Ç Google Forms
@router.message(lambda msg: msg.text.startswith("{"))  # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç JSON
async def handle_google_form(message: Message):
    try:
        # ‚úÖ –ü–∞—Ä—Å–∏–º JSON –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        form_data = json.loads(message.text)

        # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î (–≤—ã–ø–æ–ª–Ω—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ)
        await sync_to_async(PuppyRequest.objects.create)(
            name=form_data["name"],
            country=form_data["country"],
            city=form_data["city"],
            gender=form_data["gender"],
            coat_type=form_data["coat_type"],
            color=form_data["color"],
            adult_weight=form_data["adult_weight"],
            purpose=form_data["purpose"],
            temperament=form_data["temperament"],
            has_children=form_data["has_children"] == "–î–∞",
            children_age=form_data["children_age"],
            has_pets=form_data["has_pets"] == "–î–∞",
            pets_info=form_data["pets_info"],
            has_experience=form_data["has_experience"] == "–î–∞",
            budget=form_data["budget"],
            delivery_needed=form_data["delivery_needed"] == "–î–∞",
            phone=form_data["phone"],
        )

        # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ö–æ–∑—è–π–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        bot = Bot(token=settings.BOT_TOKEN)
        await bot.send_message(
            chat_id=OWNER_CHAT_ID,
            text=f"üê∂ –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞ –Ω–∞ —â–µ–Ω–∫–∞!\n\n"
                 f"üë§ {form_data['name']}\n"
                 f"üìç {form_data['city']}, {form_data['country']}\n"
                 f"üìû {form_data['phone']}\n"
                 f"üé® –û–∫—Ä–∞—Å: {form_data['color']}\n"
                 f"‚öñ –í–µ—Å: {form_data['adult_weight']}\n"
                 f"üí∞ –ë—é–¥–∂–µ—Ç: {form_data['budget']}\n"
                 f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {'–î–∞' if form_data['delivery_needed'] else '–ù–µ—Ç'}\n\n"
                 f"‚úç {form_data['purpose']}\n"
        )

        await message.answer("‚úÖ –ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–Ω–∫–µ—Ç—ã: {e}")


import datetime
from google.oauth2 import service_account
from googleapiclient.discovery import build
from config import GOOGLE_CREDENTIALS_FILE, GOOGLE_CALENDAR_ID
from aiogram import Bot
from django.conf import settings
import asyncio
from users.models import VisitorAppointment  # ‚úÖ –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö

SCOPES = ["https://www.googleapis.com/auth/calendar"]
KENNEL_ADDRESS = "–ú–æ—Å–∫–≤–∞, –ü—É—Ç–µ–≤–æ–π –ø—Ä–æ–µ–∑–¥, 52"
KENNEL_PHONE = "+7 (916) 010-05-57"


def get_calendar_service():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Calendar API."""
    credentials = service_account.Credentials.from_service_account_file(
        GOOGLE_CREDENTIALS_FILE, scopes=SCOPES
    )
    service = build("calendar", "v3", credentials=credentials)
    return service


def get_free_slots(date):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å (–ü–¢, –°–ë, –í–° —Å 12:00 –¥–æ 20:00 –ú–°–ö), –∏—Å–∫–ª—é—á–∞—è –∑–∞–Ω—è—Ç—ã–µ."""
    if date.weekday() not in [4, 5, 6]:  # –¢–æ–ª—å–∫–æ –ü–¢ (4), –°–ë (5), –í–° (6)
        return []

    service = get_calendar_service()

    start_time = datetime.datetime.combine(date, datetime.time(9, 0))  # 12:00 –ú–°–ö (UTC+3)
    end_time = datetime.datetime.combine(date, datetime.time(17, 0))  # 20:00 –ú–°–ö (UTC+3)

    events_result = service.events().list(
        calendarId=GOOGLE_CALENDAR_ID,
        timeMin=start_time.isoformat() + "Z",
        timeMax=end_time.isoformat() + "Z",
        singleEvents=True,
        orderBy="startTime",
    ).execute()

    events = events_result.get("items", [])
    booked_times = [event["start"]["dateTime"][11:16] for event in events if "dateTime" in event["start"]]

    available_slots = []
    current_time = start_time

    while current_time < end_time:
        slot = (current_time + datetime.timedelta(hours=3)).strftime("%H:%M")
        if slot not in booked_times:
            available_slots.append(slot)
        current_time += datetime.timedelta(hours=1)

    return available_slots


def get_next_available_slots():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–ª–∏–∂–∞–π—à–∏–µ –¥–≤–µ –Ω–µ–¥–µ–ª–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã."""
    today = datetime.date.today()
    available_slots = {}

    for day_offset in range(14):
        date = today + datetime.timedelta(days=day_offset)

        if date.weekday() not in [4, 5, 6]:
            continue

        slots = get_free_slots(date)
        if slots:
            available_slots[str(date)] = slots

    return available_slots


async def send_reminder(chat_id, text):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ Telegram."""
    bot = Bot(token=settings.BOT_TOKEN)
    try:
        await bot.send_message(chat_id=chat_id, text=text)
        print(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {chat_id}: {text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {chat_id}: {e}")


def schedule_appointment(client_name, phone, date_time, chat_id=None):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –≤ Google Calendar –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î."""
    print(f"üìÖ –ó–∞–ø–∏—Å—å: {client_name}, {phone}, {date_time}")

    if date_time.weekday() not in [4, 5, 6] or not (12 <= date_time.hour < 20):
        return "‚ùå –ó–∞–ø–∏—Å—å –≤–æ–∑–º–æ–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ –ø—è—Ç–Ω–∏—Ü–∞–º, —Å—É–±–±–æ—Ç–∞–º –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è–º —Å 12:00 –¥–æ 20:00 (–ú–°–ö)."

    try:
        service = get_calendar_service()

        event = {
            "summary": f"–ó–∞–ø–∏—Å—å –≤ –ø–∏—Ç–æ–º–Ω–∏–∫: {client_name}",
            "description": f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\nüë§ –ó–∞–ø–∏—Å–∞–Ω: {client_name}\nID: {chat_id or '–ù–µ —É–∫–∞–∑–∞–Ω'}",
            "start": {"dateTime": date_time.isoformat(), "timeZone": "Europe/Moscow"},
            "end": {"dateTime": (date_time + datetime.timedelta(hours=1)).isoformat(), "timeZone": "Europe/Moscow"},
            "reminders": {"useDefault": False, "overrides": [{"method": "popup", "minutes": 30}]}
        }

        print("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Google Calendar...")
        event = service.events().insert(calendarId=GOOGLE_CALENDAR_ID, body=event).execute()
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ! –°—Å—ã–ª–∫–∞: {event.get('htmlLink')}")

        # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
        VisitorAppointment.objects.create(
            full_name=client_name,
            phone=phone,
            date=date_time.date(),
            time=date_time.time(),
            chat_id=chat_id
        )

        return event.get("htmlLink")

    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞: {e}"


def check_upcoming_appointments():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –≤ –ø–∏—Ç–æ–º–Ω–∏–∫ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    service = get_calendar_service()
    now = datetime.datetime.utcnow()
    reminder_time = now + datetime.timedelta(minutes=30)

    events_result = service.events().list(
        calendarId=GOOGLE_CALENDAR_ID,
        timeMin=now.isoformat() + "Z",
        timeMax=reminder_time.isoformat() + "Z",
        singleEvents=True,
        orderBy="startTime",
    ).execute()

    events = events_result.get("items", [])
    if not events:
        print("‚è≥ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 30 –º–∏–Ω—É—Ç.")
        return

    for event in events:
        visitor_info = event.get("summary", "–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å")
        description = event.get("description", "–¢–µ–ª–µ—Ñ–æ–Ω: –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
        start_time = event["start"]["dateTime"][11:16]
        date = event["start"]["dateTime"][:10]

        # üìç –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è
        chat_id = None
        if "ID:" in description:
            chat_id = description.split("ID:")[-1].strip()

        # üìû –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
        phone = "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
        if "üìû –¢–µ–ª–µ—Ñ–æ–Ω:" in description:
            phone = description.split("üìû –¢–µ–ª–µ—Ñ–æ–Ω:")[-1].split("\n")[0].strip()

        # üè° –£–≤–µ–¥–æ–º–ª—è–µ–º —Ö–æ–∑—è–π–∫—É –ø–∏—Ç–æ–º–Ω–∏–∫–∞
        owner_message = (
            f"üè° –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –ß–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–∏–∑–∏—Ç:\n"
            f"üë§ {visitor_info}\nüìÖ –î–∞—Ç–∞: {date}, –í—Ä–µ–º—è: {start_time}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è: {phone}\n"
            f"üìç –ê–¥—Ä–µ—Å –ø–∏—Ç–æ–º–Ω–∏–∫–∞: {KENNEL_ADDRESS}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω –ø–∏—Ç–æ–º–Ω–∏–∫–∞: {KENNEL_PHONE}"
        )
        asyncio.run(send_reminder(183208176, owner_message))  # ID —Ö–æ–∑—è–π–∫–∏

        # üì© –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—é
        if chat_id:
            visitor_message = (
                f"üì¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –í–∞—à –≤–∏–∑–∏—Ç –≤ –ø–∏—Ç–æ–º–Ω–∏–∫ üè° '–õ–µ–¥–∏ –ß–∏' —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç.\n"
                f"üìÖ –î–∞—Ç–∞: {date}\nüïí –í—Ä–µ–º—è: {start_time}\n"
                f"üìç –ê–¥—Ä–µ—Å –ø–∏—Ç–æ–º–Ω–∏–∫–∞: {KENNEL_ADDRESS}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω –ø–∏—Ç–æ–º–Ω–∏–∫–∞: {KENNEL_PHONE}\n"
                f"üìå –ñ–¥–µ–º –≤–∞—Å!"
            )
            asyncio.run(send_reminder(chat_id, visitor_message))

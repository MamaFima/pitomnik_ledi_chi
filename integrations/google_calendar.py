import datetime
from google.oauth2 import service_account
from googleapiclient.discovery import build
from config import GOOGLE_CREDENTIALS_FILE, GOOGLE_CALENDAR_ID

SCOPES = ["https://www.googleapis.com/auth/calendar"]


def get_calendar_service():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Calendar API."""
    credentials = service_account.Credentials.from_service_account_file(
        GOOGLE_CREDENTIALS_FILE, scopes=SCOPES
    )
    service = build("calendar", "v3", credentials=credentials)
    return service

def get_free_slots(date):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å (–ü–¢, –°–ë, –í–° —Å 12:00 –¥–æ 20:00 –ú–°–ö), –∏—Å–∫–ª—é—á–∞—è –∑–∞–Ω—è—Ç—ã–µ."""
    if date.weekday() not in [4, 5, 6]:  # –¢–æ–ª—å–∫–æ –ü–¢ (4), –°–ë (5), –í–° (6)
        return []

    service = get_calendar_service()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã (UTC, —Ç–∞–∫ –∫–∞–∫ Google API —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ UTC)
    start_time = datetime.datetime.combine(date, datetime.time(9, 0))  # 12:00 –ú–°–ö (UTC+3)
    end_time = datetime.datetime.combine(date, datetime.time(17, 0))  # 20:00 –ú–°–ö (UTC+3)

    events_result = service.events().list(
        calendarId=GOOGLE_CALENDAR_ID,
        timeMin=start_time.isoformat() + "Z",
        timeMax=end_time.isoformat() + "Z",
        singleEvents=True,
        orderBy="startTime",
    ).execute()

    events = events_result.get("items", [])

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
    booked_times = []
    for event in events:
        event_start = event["start"].get("dateTime")
        if event_start:
            booked_times.append(event_start[11:16])  # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ HH:MM

    available_slots = []
    current_time = start_time

    while current_time < end_time:
        slot = (current_time + datetime.timedelta(hours=3)).strftime("%H:%M")  # +3 —á–∞—Å–∞ –∫ UTC
        if slot not in booked_times:  # –ï—Å–ª–∏ —Å–ª–æ—Ç –Ω–µ –∑–∞–Ω—è—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            available_slots.append(slot)
        current_time += datetime.timedelta(hours=1)

    return available_slots  # ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤


def get_next_available_slots():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–ª–∏–∂–∞–π—à–∏–µ –¥–≤–µ –Ω–µ–¥–µ–ª–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ø–∏—Ç–æ–º–Ω–∏–∫.
    """
    today = datetime.date.today()
    available_slots = {}

    for day_offset in range(14):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º 14 –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥
        date = today + datetime.timedelta(days=day_offset)

        # –ó–∞–ø–∏—Å—å –≤–æ–∑–º–æ–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ –ü–¢ (4), –°–ë (5), –í–° (6)
        if date.weekday() not in [4, 5, 6]:
            continue

        slots = get_free_slots(date)
        if slots:
            available_slots[str(date)] = slots

    print(f"üìÜ –ù–∞–π–¥–µ–Ω–æ {len(available_slots)} –¥–Ω–µ–π —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏.")
    return available_slots  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞—Ç–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–µ–º


def schedule_appointment(client_name, phone, date_time):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –≤ Google Calendar, –¥–æ–±–∞–≤–ª—è—è –§–ò–û –∏ —Ç–µ–ª–µ—Ñ–æ–Ω."""
    print(f"üìÖ –ó–∞–ø–∏—Å—å: {client_name}, {phone}, {date_time}")  # –û—Ç–ª–∞–¥–∫–∞

    if date_time.weekday() not in [4, 5, 6] or not (12 <= date_time.hour < 20):
        return "‚ùå –ó–∞–ø–∏—Å—å –≤–æ–∑–º–æ–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ –ø—è—Ç–Ω–∏—Ü–∞–º, —Å—É–±–±–æ—Ç–∞–º –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è–º —Å 12:00 –¥–æ 20:00 (–ú–°–ö)."

    try:
        service = get_calendar_service()

        event = {
            "summary": f"–ó–∞–ø–∏—Å—å –≤ –ø–∏—Ç–æ–º–Ω–∏–∫: {client_name}",
            "description": f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\nüë§ –ó–∞–ø–∏—Å–∞–Ω: {client_name}",
            "start": {"dateTime": date_time.isoformat(), "timeZone": "Europe/Moscow"},
            "end": {"dateTime": (date_time + datetime.timedelta(hours=1)).isoformat(), "timeZone": "Europe/Moscow"},
            "reminders": {"useDefault": False, "overrides": [{"method": "popup", "minutes": 30}]}
        }

        print("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Google Calendar...")  # –û—Ç–ª–∞–¥–∫–∞
        event = service.events().insert(calendarId=GOOGLE_CALENDAR_ID, body=event).execute()
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ! –°—Å—ã–ª–∫–∞: {event.get('htmlLink')}")  # –û—Ç–ª–∞–¥–∫–∞
        return event.get("htmlLink")

    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞: {e}"

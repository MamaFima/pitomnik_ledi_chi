import requests
import asyncio
import datetime
from config import OPENAI_API_KEY, OPENAI_ASSISTANT_ID
from integrations.google_calendar import get_free_slots, schedule_appointment
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

API_URL = "https://api.openai.com/v1"
HEADERS = {
    "Authorization": f"Bearer {OPENAI_API_KEY}",
    "Content-Type": "application/json",
    "OpenAI-Beta": "assistants=v2"
}

# FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
class BookingState(StatesGroup):
    waiting_for_time = State()


async def ask_assistant(user_input, user_id, state: FSMContext = None):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ OpenAI –∏–ª–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏.
    """
    user_input_lower = user_input.lower()

    # üöÄ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –ø–∏—Ç–æ–º–Ω–∏–∫
    if "–∑–∞–ø–∏—à–∏ –º–µ–Ω—è" in user_input_lower or "–∑–∞–ø–∏—Å—å –≤ –ø–∏—Ç–æ–º–Ω–∏–∫" in user_input_lower:
        print("üìÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã...")

        today = datetime.datetime.now().date()
        free_slots = get_free_slots(today)

        if not free_slots:
            return "‚ùå –ù–∞ —Å–µ–≥–æ–¥–Ω—è –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∑–∞–Ω—è—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –¥–µ–Ω—å."

        # üí¨ –ë–æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è
        slot_buttons = [types.KeyboardButton(slot) for slot in free_slots]
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=[slot_buttons[i : i + 2] for i in range(0, len(slot_buttons), 2)],
            resize_keyboard=True,
            one_time_keyboard=True
        )

        if state:
            await state.set_state(BookingState.waiting_for_time)
            await state.update_data(user_id=user_id)

        print("üìÖ –ë–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏–ª –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è:", free_slots)
        return "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏:", keyboard

    # ‚úÖ –ï—Å–ª–∏ –±–æ—Ç –ñ–î–Å–¢ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
    if state and await state.get_state() == BookingState.waiting_for_time:
        user_data = await state.get_data()
        selected_time = user_input  # –í—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

        # üïí –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ datetime
        today = datetime.datetime.now().date()
        appointment_time = datetime.datetime.combine(today, datetime.datetime.strptime(selected_time, "%H:%M").time())

        # üìå –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Google –ö–∞–ª–µ–Ω–¥–∞—Ä—å
        result = schedule_appointment("–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å", f"UserID {user_data['user_id']}", appointment_time)

        return f"‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ {selected_time}! {result}" if "http" in result else "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏."

    # üê∂ –í–æ–ø—Ä–æ—Å—ã –ø—Ä–æ —â–µ–Ω–∫–æ–≤ ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏ –≤ start.py
    # üê∂ –í–æ–ø—Ä–æ—Å—ã –ø—Ä–æ —â–µ–Ω–∫–æ–≤ ‚Üí –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    if any(kw in user_input_lower for kw in ["—â–µ–Ω–∫–∏", "—Å–≤–æ–±–æ–¥–Ω—ã–µ —â–µ–Ω–∫–∏", "–∫—É–ø–∏—Ç—å —â–µ–Ω–∫–∞", "–∑–∞–≤–µ—Å—Ç–∏ —â–µ–Ω–∫–∞"]):
        return "üê∂ –£ –Ω–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —â–µ–Ω–∫–∏! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É **'–°–≤–æ–±–æ–¥–Ω—ã–µ —â–µ–Ω–∫–∏'** –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É **'–•–æ—á—É —â–µ–Ω–∫–∞'**."

        # üõç –í–æ–ø—Ä–æ—Å—ã –ø—Ä–æ –º–∞–≥–∞–∑–∏–Ω ‚Üí –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ú–∞–≥–∞–∑–∏–Ω"
    if any(kw in user_input_lower for kw in ["–º–∞–≥–∞–∑–∏–Ω", "—Ç–æ–≤–∞—Ä—ã", "–∫—É–ø–∏—Ç—å –∫–æ—Ä–º", "—Ç–æ–≤–∞—Ä—ã –¥–ª—è —Å–æ–±–∞–∫"]):
        return "üõç –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É **'–ú–∞–≥–∞–∑–∏–Ω'**."

        # üè° –í–æ–ø—Ä–æ—Å—ã –ø—Ä–æ –ø–æ—Å–µ—â–µ–Ω–∏–µ –ø–∏—Ç–æ–º–Ω–∏–∫–∞ ‚Üí –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ü–æ—Å–µ—Ç–∏—Ç—å –ø–∏—Ç–æ–º–Ω–∏–∫"
    if any(kw in user_input_lower for kw in ["–∑–∞–ø–∏—Å—å –≤ –ø–∏—Ç–æ–º–Ω–∏–∫", "–ø–æ—Å–µ—Ç–∏—Ç—å –ø–∏—Ç–æ–º–Ω–∏–∫", "–∑–∞–ø–∏—à–∏ –º–µ–Ω—è"]):
        return "üè° –ó–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –ø–æ—Å–µ—â–µ–Ω–∏–µ, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É **'–ü–æ—Å–µ—Ç–∏—Ç—å –ø–∏—Ç–æ–º–Ω–∏–∫'**."

    if any(kw in user_input_lower for kw in ["—â–µ–Ω–∫–∏", "—Å–≤–æ–±–æ–¥–Ω—ã–µ —â–µ–Ω–∫–∏", "–∫—É–ø–∏—Ç—å —â–µ–Ω–∫–∞", "–∑–∞–≤–µ—Å—Ç–∏ —â–µ–Ω–∫–∞"]):
        return "üê∂ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —â–µ–Ω–∫–æ–≤ –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."

    # üõç –í–æ–ø—Ä–æ—Å—ã –ø—Ä–æ –º–∞–≥–∞–∑–∏–Ω ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏ –≤ start.py
    if any(kw in user_input_lower for kw in ["–º–∞–≥–∞–∑–∏–Ω", "—Ç–æ–≤–∞—Ä—ã", "–∫—É–ø–∏—Ç—å –∫–æ—Ä–º", "—Ç–æ–≤–∞—Ä—ã –¥–ª—è —Å–æ–±–∞–∫"]):
        return "üõç –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."

    # üè° –í–æ–ø—Ä–æ—Å—ã –ø—Ä–æ –ø–æ—Å–µ—â–µ–Ω–∏–µ –ø–∏—Ç–æ–º–Ω–∏–∫–∞ ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏ –≤ start.py
    if any(kw in user_input_lower for kw in ["–∑–∞–ø–∏—Å—å –≤ –ø–∏—Ç–æ–º–Ω–∏–∫", "–ø–æ—Å–µ—Ç–∏—Ç—å –ø–∏—Ç–æ–º–Ω–∏–∫", "–∑–∞–ø–∏—à–∏ –º–µ–Ω—è"]):
        return "üè° –ó–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –ø–æ—Å–µ—â–µ–Ω–∏–µ –ø–∏—Ç–æ–º–Ω–∏–∫–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."

    # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ —Å–≤—è–∑–∞–Ω —Å –∫–Ω–æ–ø–∫–∞–º–∏ ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ OpenAI
    return await send_to_openai(user_input)



async def send_to_openai(user_input):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ OpenAI –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç.
    –ï—Å–ª–∏ OpenAI –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ 10 —Å–µ–∫—É–Ω–¥, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
    """
    try:
        API_URL = "https://api.openai.com/v1"
        HEADERS = {
            "Authorization": f"Bearer {OPENAI_API_KEY}",
            "Content-Type": "application/json",
            "OpenAI-Beta": "assistants=v2"
        }

        print("üì° –°–æ–∑–¥–∞—ë–º —Ç—Ä–µ–¥ –¥–ª—è –æ–±—â–µ–Ω–∏—è...")
        thread_response = requests.post(f"{API_URL}/threads", headers=HEADERS, json={}, timeout=10)

        if thread_response.status_code != 200:
            return "‚ö† –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º."

        thread_id = thread_response.json().get("id")
        print(f"‚úÖ –¢—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω: {thread_id}")

        message_response = requests.post(
            f"{API_URL}/threads/{thread_id}/messages",
            headers=HEADERS,
            json={"role": "user", "content": user_input},
            timeout=10
        )

        if message_response.status_code != 200:
            return "‚ö† –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É."

        print("üì° –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...")
        run_response = requests.post(
            f"{API_URL}/threads/{thread_id}/runs",
            headers=HEADERS,
            json={"assistant_id": OPENAI_ASSISTANT_ID},
            timeout=10
        )

        if run_response.status_code != 200:
            return "‚ö† –û—à–∏–±–∫–∞: –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å."

        run_id = run_response.json().get("id")
        print(f"‚úÖ –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω: {run_id}")

        # üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ (–º–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥)
        for _ in range(5):
            print("‚åõ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞...")
            await asyncio.sleep(2)

            status_response = requests.get(
                f"{API_URL}/threads/{thread_id}/runs/{run_id}",
                headers=HEADERS,
                timeout=5
            )

            if status_response.status_code == 200:
                run_status = status_response.json().get("status")
                if run_status == "completed":
                    break
                elif run_status == "incomplete":
                    print("‚ö† OpenAI –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–æ–≤—Ä–µ–º—è. –ü—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞.")
                    continue

        messages_response = requests.get(f"{API_URL}/threads/{thread_id}/messages", headers=HEADERS, timeout=10)

        if messages_response.status_code != 200:
            return "‚ö† –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."

        messages = messages_response.json().get("data", [])
        if not messages:
            return "‚ö† –û—à–∏–±–∫–∞: –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ –¥–∞–ª –æ—Ç–≤–µ—Ç–∞."

        # üîç –ò—â–µ–º –ü–ï–†–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        assistant_reply = ""
        for msg in messages:
            if msg["role"] == "assistant" and "content" in msg:
                for item in msg["content"]:
                    if item["type"] == "text":
                        assistant_reply += item["text"]["value"] + "\n"
                break  # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞

        assistant_reply = assistant_reply.strip()
        if not assistant_reply:
            return "‚ö† –û—à–∏–±–∫–∞: –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ –¥–∞–ª –ø–æ–Ω—è—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞."

        print(f"‚úÖ –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {assistant_reply}")
        return assistant_reply

    except requests.exceptions.Timeout:
        return "‚ö† OpenAI –æ—Ç–≤–µ—á–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI: {e}")
        return "‚ö† –û—à–∏–±–∫–∞: –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."

